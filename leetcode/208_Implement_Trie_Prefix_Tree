#https://leetcode.com/problems/implement-trie-prefix-tree/

class TrieNode:
    def __init__(self):
        self.letters = [None]*26
        self.isEndOfWord = False

class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root = self.getTrieNode()
    
    def getTrieNode(self):
        return TrieNode()
    
    def getIndex(self,ch):
        return ord(ch)-ord('a')

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        node = self.root
        for i in word:
            index = self.getIndex(i)
            if node.letters[index] == None:
                node.letters[index] = self.getTrieNode()
            node = node.letters[index]
        node.isEndOfWord = True

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        node = self.root
        for ch in word:
            i = self.getIndex(ch)
            if node.letters[i] == None:
                return False
            node = node.letters[i]
        return node.isEndOfWord

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        node = self.root
        for ch in prefix:
            i = self.getIndex(ch)
            if node.letters[i] is None:
                return False
            node = node.letters[i]
        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
